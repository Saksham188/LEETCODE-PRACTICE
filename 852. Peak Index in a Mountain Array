852. Peak Index in a Mountain Array
Easy

Follow up: Finding the O(n) is straightforward, could you find an O(log(n)) solution?

Let's call an array arr a mountain if the following properties hold:
arr.length >= 3
There exists some i with 0 < i < arr.length - 1 such that:
arr[0] < arr[1] < ... arr[i-1] < arr[i]
arr[i] > arr[i+1] > ... > arr[arr.length - 1]
Given an integer array arr that is guaranteed to be a mountain, return any i such that arr[0] < arr[1] < ... arr[i - 1] < arr[i] > arr[i + 1] > ... > arr[arr.length - 1].
 

Example 1:
Input: arr = [0,1,0]
Output: 1

Example 2:
Input: arr = [0,2,1,0]
Output: 1

Example 3:
Input: arr = [0,10,5,2]
Output: 1
 
Constraints:

3 <= arr.length <= 104
0 <= arr[i] <= 106
arr is guaranteed to be a mountain array.
 
##################################################
CODE:
##############################################
Approach1: O(N) Time







******************************
Approach2 O(log N) Time

LOGIC:    mid nikalo and ye hai ki phele increasing order hoga i tak fir uske baad decreasing order shuru.toh check krlo mid 
          and uske agle ele mein kya relation agar chota hai mid toh mtlb i tak aaye ni hai toh ham low ko mid+1 daaldete taki aage search krske.
          and agar mid bada ho jata toh high ko decrease krdo and end mein low mein hoga hamara ans.

class Solution {
public:
    int peakIndexInMountainArray(vector<int>& arr) {
      int low=0,high=arr.size()-1,mid;
      
      while(low<high)
      {
          mid=(low+high)/2;  
          
          if(arr[mid]<arr[mid+1])
          {
              low=mid+1;   
          }
          else 
          {
              high=mid;
          }
          
      }
        return low;
  }
};
