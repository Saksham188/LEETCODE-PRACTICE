1413. Minimum Value to Get Positive Step by Step Sum
Easy


Given an array of integers nums, you start with an initial positive value startValue.
In each iteration, you calculate the step by step sum of startValue plus elements in nums (from left to right).
Return the minimum positive value of startValue such that the step by step sum is never less than 1.

Example 1:
Input: nums = [-3,2,-3,4,2]
Output: 5
Explanation: If you choose startValue = 4, in the third iteration your step by step sum is less than 1.
step by step sum
startValue = 4 | startValue = 5 | nums
  (4 -3 ) = 1  | (5 -3 ) = 2    |  -3
  (1 +2 ) = 3  | (2 +2 ) = 4    |   2
  (3 -3 ) = 0  | (4 -3 ) = 1    |  -3
  (0 +4 ) = 4  | (1 +4 ) = 5    |   4
  (4 +2 ) = 6  | (5 +2 ) = 7    |   2

Example 2:
Input: nums = [1,2]
Output: 1
Explanation: Minimum start value should be positive. 

Example 3:
Input: nums = [1,-2,-3]
Output: 5
 
Constraints:

1 <= nums.length <= 100
-100 <= nums[i] <= 100


#####################################
CODE:
#####################################

///Logic:Here first calculate sum till each index in vector and take min sum as its min value and if our minsum<0 then our ans will be -min +1 eg minsum=-4 
///so ans=-(-4)+1=5 and if minsum>0 then ans is 1.as ifwe get 0 anywhere then sum=0+1=1.

///TC:O(N), SC:O(1)
class Solution {
public:
    int minStartValue(vector<int>& nums) {

        int MinVal=INT_MAX,sum=0;
        
        for(auto it:nums)
        {
            sum+=it;
            
            MinVal=min(sum,MinVal);
        }
        
       return MinVal<0? 1-MinVal:1;
    }
};











