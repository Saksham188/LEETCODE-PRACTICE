2164. Sort Even and Odd Indices Independently
Easy


You are given a 0-indexed integer array nums. Rearrange the values of nums according to the following rules:
Sort the values at odd indices of nums in non-increasing order.
For example, if nums = [4,1,2,3] before this step, it becomes [4,3,2,1] after. The values at odd indices 1 and 3 are sorted in non-increasing order.
Sort the values at even indices of nums in non-decreasing order.
For example, if nums = [4,1,2,3] before this step, it becomes [2,1,4,3] after. The values at even indices 0 and 2 are sorted in non-decreasing order.
Return the array formed after rearranging the values of nums.

 

Example 1:
Input: nums = [4,1,2,3]
Output: [2,3,4,1]
Explanation: 
First, we sort the values present at odd indices (1 and 3) in non-increasing order.
So, nums changes from [4,1,2,3] to [4,3,2,1].
Next, we sort the values present at even indices (0 and 2) in non-decreasing order.
So, nums changes from [4,1,2,3] to [2,3,4,1].
Thus, the array formed after rearranging the values is [2,3,4,1].

Example 2:
Input: nums = [2,1]
Output: [2,1]
Explanation: 
Since there is exactly one odd index and one even index, no rearrangement of values takes place.
The resultant array formed is [2,1], which is the same as the initial array. 
 

Constraints:

1 <= nums.length <= 100
1 <= nums[i] <= 100

################################################
CODE:
################################################

METHOD1: TC:O(N^2) SC:O(1)

class Solution {
public:
    vector<int> sortEvenOdd(vector<int>& nums) {
        
        for(int i=0;i<nums.size();i=i+2)
        {
            for(int j=i+2;j<nums.size();j=j+2)
            {
                if(nums[j]<nums[i])
                    swap(nums[i],nums[j]);
                
            }  
        }
        
        for(int i=1;i<nums.size();i=i+2)
        {
            for(int j=i+2;j<nums.size();j=j+2)
            {
                if(nums[j]>nums[i])
                    swap(nums[i],nums[j]);
            }  
        }
       
        
        return nums;
    }
};



#######################################
METHOD 2:
#######################################
TC:O(NlogN)  SC:O(N)
As pushing 1 item in heap takes O(log N) time so for N items TC:O(N LogN)


******************************
class Solution {
public:
    vector<int> sortEvenOdd(vector<int>& nums) {

        priority_queue<int,vector<int> >Odd;
        priority_queue<int,vector<int>,greater<int> >Even;  ///Since we want to sort in increasing order so we make a Min Heap.
        vector<int>ans;
        for(int i=0;i<nums.size();i++)
        {
            if(i%2==1)
               Odd.push(nums[i]);
            else
               Even.push(nums[i]);
        }
        
        while(!Even.empty() and !Odd.empty())
        {
            ans.push_back(Even.top());
            Even.pop();
            ans.push_back(Odd.top());
            Odd.pop();
        }
        
        while(!Even.empty())
        {
            ans.push_back(Even.top());
            Even.pop();    
        }
        while(!Odd.empty())
        {
           ans.push_back(Odd.top());
            Odd.pop();   
        }
        
        return ans;
    }
};









