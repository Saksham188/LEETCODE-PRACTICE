637. Average of Levels in Binary Tree
Easy


Given the root of a binary tree, return the average value of the nodes on each level in the form of an array. Answers within 10^-5 of the actual answer will be accepted.
 
Example 1:

			      3
		       /  \
		      9    20	
		   	       / \    
              15  7   		
		
    
Input: root = [3,9,20,null,null,15,7]
Output: [3.00000,14.50000,11.00000]
Explanation: The average value of nodes on level 0 is 3, on level 1 is 14.5, and on level 2 is 11.
Hence return [3, 14.5, 11].

Example 2:
			      3
		       /  \
		      9    20	
		   	 / \    
        15  7   		
		
Input: root = [3,9,20,15,7]
Output: [3.00000,14.50000,11.00000]
 

Constraints:

The number of nodes in the tree is in the range [1, 10^4].
-2^31 <= Node.val <= 2^31 - 1

###############################################
CODE:
###############################################

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<double> averageOfLevels(TreeNode* root) {
        vector<double>ans;
        
        double sum=0;
        int count=0;
        
        queue<TreeNode*>q;
        q.push(root);
        q.push(NULL);  ///NULL will signify end of level.
                
        while(!q.empty())
        {
            TreeNode* temp=q.front();
            q.pop();
            if(temp!=NULL)
            {
                sum+=temp->val;
                count++;
                
                if(temp->left)
                    q.push(temp->left);
                if(temp->right)
                    q.push(temp->right);
            }
        
            else if(!q.empty())
            {
                ans.push_back(sum/count);
                sum=0;
                count=0;
                q.push(NULL);
            }
            
        }
        ans.push_back(sum/count);
        
        return ans;
        
        
        
    }
};











