111. Minimum Depth of Binary Tree
Easy

Given a binary tree, find its minimum depth.
The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.
Note: A leaf is a node with no children.

 

Example 1:

            3
		       / \
		      9   20	
		     	    / \
             15  7	
             
Input: root = [3,9,20,null,null,15,7]
Output: 2

Example 2:
Input: root = [2,null,3,null,4,null,5,null,6]
Output: 5

Constraints:

The number of nodes in the tree is in the range [0, 10^5].
-1000 <= Node.val <= 1000


###########################################
CODE:
###########################################

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int minDepth(TreeNode* root) {
        if(root==NULL)
            return 0;
       
        int leftDepth=minDepth(root->left);
        int rightDepth=minDepth(root->right);
        
        //If both child exist then ans will be min of left and right +1. And if any 1 child exist then ans will be that child +1.          
        if(leftDepth!=NULL and rightDepth!=NULL )
            return min(leftDepth,rightDepth)+1;
        else
            return max(leftDepth,rightDepth)+1;

    }
};







