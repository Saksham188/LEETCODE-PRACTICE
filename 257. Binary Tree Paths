257. Binary Tree Paths
Easy


Given the root of a binary tree, return all root-to-leaf paths in any order.
A leaf is a node with no children.

 

Example 1:

	            1 
             / \             
            2   3          
            \               
             5  

Input: root = [1,2,3,null,5]
Output: ["1->2->5","1->3"]

Example 2:
Input: root = [1]
Output: ["1"]
 

Constraints:

The number of nodes in the tree is in the range [1, 100].
-100 <= Node.val <= 100

########################################
CODE:
########################################
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    void Helper(TreeNode* root,vector<string>&Ans,string s)
    {
        if(root==NULL)
            return;
        
        if(root->left!=NULL or root->right!=NULL)
            s+=to_string(root->val)+"->";
        else                                                            
        {
            s+=to_string(root->val);
            Ans.push_back(s);
        }
        
        Helper(root->left,Ans,s);
        Helper(root->right,Ans,s);

    }
    vector<string> binaryTreePaths(TreeNode* root) {
        vector<string>Ans;
        string s="";
        Helper(root,Ans,s);
        return Ans;
    }
};

