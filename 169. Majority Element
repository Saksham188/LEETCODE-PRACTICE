169. Majority Element
Easy

Given an array nums of size n, return the majority element.
The majority element is the element that appears more than ⌊n / 2⌋ times. You may assume that the majority element always exists in the array.

Example 1:
Input: nums = [3,2,3]
Output: 3

Example 2:
Input: nums = [2,2,1,1,1,2,2]
Output: 2
 

Constraints:
n == nums.length
1 <= n <= 5 * 10^4
-2^31 <= nums[i] <= 2^31 - 1
 

Follow-up: Could you solve the problem in linear time and in O(1) space?


#######################################################
CODE:
#######################################################

METHOD 1:
/// TC:O(N) SC:O(N)

class Solution {
public:
    int majorityElement(vector<int>& nums) {
        map<int,int>freq;
        
        for(auto i:nums)
        {
            freq[i]++;
        }
        int maxi=INT_MIN,val=INT_MIN;
        for(auto i:freq)
        {
            if(i.second>val)
            {
                val=i.second;
                maxi=max(maxi,i.first);
                
            }
        }
        
        return maxi;
    }
};



*****************************************
METHOD 2:
Logic: Boyer-Moore Majority Voting Algo: TC:O(N) SC:O(1)

// Boyer-Moore Majority Voting Algo: Here in this algo we choose one candidate and votes is its frequency.Here if votes bcme 0  then update candidate to nums[i] 
//and inc votes to 1. else if we get matching element then increment the votes and if it not match then decrement vote. and then traverse again and count fre of max occurying
//ele and if its >n/2 then return candidate else return -1.

class Solution {
public:
    int majorityElement(vector<int>& nums) {
        int candidate=-1,votes=0;        
        for(auto i:nums)
        {
            if(votes==0)
            {
                candidate=i;
                votes=1;
            }
            else
            {
                if(i==candidate)
                {
                    votes++;
                }
                else
                    votes--;
            }
        }
       
        int count=0;
        for(int i=0;i<nums.size();i++)
        {
            if(nums[i]==candidate)
                count++; 
        }
        
        if(count>nums.size()/2)
            return candidate;
        
        return -1;
    }
};
