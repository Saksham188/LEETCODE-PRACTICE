Given a string s, find the length of the longest substring without repeating characters.

 

Example 1:

Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.
Example 2:

Input: s = "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
Example 3:

Input: s = "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3.
Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.
 

Constraints:

0 <= s.length <= 5 * 104
s consists of English letters, digits, symbols and spaces.

##########################################################

class Solution {
public:
    int lengthOfLongestSubstring(string s) {
         vector<int> dict(256,-1);  
    int MaxLength=0, Start=-1;

    for(int i=0;i<s.size();i++)
    {
        if(dict[s[i]]> Start) //yaha check krre ki vo phele occur hui pdi ya ni.agar ni hui toh ye condition false ho jayegi.
        //and false hone pe dict[s[i]] yani dict[s[0]]=dict['a']=dict[97] ispe i store krdo.and agar repeat ho jata toh start ko update krdo.
            Start=dict[s[i]]; 
        dict[s[i]]=i;
        MaxLength=max(MaxLength,i-Start);
        ///hamari maxlength hogi i-start.
    }
    return MaxLength;
    }
};
