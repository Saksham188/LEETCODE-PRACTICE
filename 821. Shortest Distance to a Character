821. Shortest Distance to a Character
Easy

Given a string s and a character c that occurs in s, return an array of integers answer where answer.length == s.length and
answer[i] is the distance from index i to the closest occurrence of character c in s.

The distance between two indices i and j is abs(i - j), where abs is the absolute value function.

 

Example 1:

Input: s = "loveleetcode", c = "e"
Output: [3,2,1,0,1,0,0,1,2,2,1,0]
Explanation: The character 'e' appears at indices 3, 5, 6, and 11 (0-indexed).
The closest occurrence of 'e' for index 0 is at index 3, so the distance is abs(0 - 3) = 3.
The closest occurrence of 'e' for index 1 is at index 3, so the distance is abs(1 - 3) = 2.
For index 4, there is a tie between the 'e' at index 3 and the 'e' at index 5, but the distance is still the same: abs(4 - 3) == abs(4 - 5) = 1.
The closest occurrence of 'e' for index 8 is at index 6, so the distance is abs(8 - 6) = 2.
Example 2:

Input: s = "aaab", c = "b"
Output: [3,2,1,0]
 

Constraints:

1 <= s.length <= 10^4
s[i] and c are lowercase English letters.
It is guaranteed that c occurs at least once in s.

###################################################
CODE:
###################################################

///Logic: First start traversing from left till we find our element pos.and after finding we traverse from left and we store the i-pos in ans array.
after end we will traverse from right to left and we will find min of this ans and ans at that pos.
*****************************************************


class Solution {
public:
    vector<int> shortestToChar(string s, char c) {
        
        int length=s.size(),pos=-1;
        vector<int>ans(length,INT_MAX);
        
        for(int i=0;i<length;i++)
        {
            if(s[i]==c)
            {
                pos=i; ///if val found then store value in pos.
            }
            
            if(pos!=-1) ///if pos is not equal to -1 ie ele not found.
            {
                ans[i]=i-pos; ///then store in ans[i]=i-pos;
                
            }
        }
        pos=-1;
        ///NOW traverse from right side and find and store min in ans.
        for(int i=length-1;i>=0;i--)
        {
            if(s[i]==c)
            {
                pos=i; ///if val found then store value in pos.
            }
            
            if(pos!=-1) ///if pos is not equal to -1 ie ele not found.
            {
                ans[i]=min(ans[i],pos-i); ///then store min in ans[i];
                
            }
        }
        return ans;
        
    }
};



























