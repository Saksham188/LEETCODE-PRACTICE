338. Counting Bits
Easy

Given an integer n, return an array ans of length n + 1 such that for each i (0 <= i <= n), ans[i] is the number of 1's in the binary representation of i.


Example 1:
Input: n = 2
Output: [0,1,1]
Explanation:
0 --> 0
1 --> 1
2 --> 10

Example 2:
Input: n = 5
Output: [0,1,1,2,1,2]
Explanation:
0 --> 0
1 --> 1
2 --> 10
3 --> 11
4 --> 100
5 --> 101
 

Constraints:

0 <= n <= 10^5
 

Follow up:

It is very easy to come up with a solution with a runtime of O(n log n). Can you do it in linear time O(n) and possibly in a single pass?
Can you do it without using any built-in function (i.e., like __builtin_popcount in C++)?

##############################################
CODE:
##############################################
class Solution {
public:
    vector<int> countBits(int n) {
        vector<int>ans(n+1);
        
        for(int i=0;i<=n;i++)
        {
            ans[i]= __builtin_popcount(i);
        }
        
        return ans;
    }
};


###################################################
WITHOUT BUILT IN FUNCTION
CODE:
####################################################

///Logic: Here we see that if num in loop is even then ans at that place is ans[x/2] and if num is odd then ans is ans[x/2]+1. 
/// ans[0]=1, so ans[1]will be since 1 is odd ans[1/2]+1 =ans[0]+1=1 and ans[2]=ans[1]=1 ,similarly fill all places.
class Solution {
public:
    vector<int> countBits(int n) {
        vector<int>ans(n+1);
        ans[0]=0;
        
        for(int i=1;i<=n;i++)
        {
            if(i%2==0)
                ans[i]=ans[i/2];
            else
                ans[i]=ans[i/2]+1;
        }
        
        return ans;
    }
};
