2248. Intersection of Multiple Arrays
Easy


Given a 2D integer array nums where nums[i] is a non-empty array of distinct positive integers, return the list of integers that are present in each array of nums
sorted in ascending order.
 
Example 1:
Input: nums = [[3,1,2,4,5],[1,2,3,4],[3,4,5,6]]
Output: [3,4]
Explanation: 
The only integers present in each of nums[0] = [3,1,2,4,5], nums[1] = [1,2,3,4], and nums[2] = [3,4,5,6] are 3 and 4, so we return [3,4].

Example 2:
Input: nums = [[1,2,3],[4,5,6]]
Output: []
Explanation: 
There does not exist any integer present both in nums[0] and nums[1], so we return an empty list [].
 

Constraints:

1 <= nums.length <= 1000
1 <= sum(nums[i].length) <= 1000
1 <= nums[i][j] <= 1000
All the values of nums[i] are unique.


########################################
CODE:
########################################
Method 1: TC:O(N*N)

class Solution {
public:
    vector<int> intersection(vector<vector<int>>& nums) {
        
        set<int>ans;
        int flag=0;
        
        for(auto it:nums[0])
        {
            flag=0;
            for(int i=0;i<nums.size();i++)
            {
                if(find(nums[i].begin(),nums[i].end(),it)==nums[i].end())
                {
                    flag=1;
                    break;
                }
            }
            if(flag==0)
            {
                ans.insert(it);
            }
            
        }
        return vector<int>(ans.begin(),ans.end());
    }
};


****************************************
METHOD 2:
****************************************

class Solution {
public:
    vector<int> intersection(vector<vector<int>>& nums) {
        
        map<int,int>mp;
        vector<int>ans;

        
        for(int i=0;i<nums.size();i++)
        for(auto it:nums[i])
        {
            mp[it]++;
        }
        
        for(auto it:mp)
        {
            cout<<it.first<<" "<<it.second<<"\n";
        }
        for(auto it:mp)
        {
            if(it.second==nums.size())
                ans.push_back(it.first);
        }
        sort(ans.begin(),ans.end());
        return ans;

    }
};
