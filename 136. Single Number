136. Single Number
Easy


Given a non-empty array of integers nums, every element appears twice except for one. Find that single one.

You must implement a solution with a linear runtime complexity and use only constant extra space.

 
Example 1:
Input: nums = [2,2,1]
Output: 1

Example 2:
Input: nums = [4,1,2,1,2]
Output: 4

Example 3:
Input: nums = [1]
Output: 1
 

Constraints:

1 <= nums.length <= 3 * 10^4
-3 * 10^4 <= nums[i] <= 3 * 10^4
Each element in the array appears twice except for one element which appears only once.

##################################################
CODE:
##################################################
#Using O(N) Space:

class Solution {
public:
    int singleNumber(vector<int>& nums) {
       map<int,int>mp;
        
        for(auto it:nums)
        {
            mp[it]++;
        }
        
        for(auto it:mp)
        {
            if(it.second==1)
                return it.first;
        }
        
        return 1;
    
    }
};

############################################
Method 2:

///Here best logic would be to do xor as if num are same then xor will be same eg 0^0=0 and 1^1=0 so only unique num will be left.
class Solution {
public:
    int singleNumber(vector<int>& nums) {
        int ans=0;
        for(int i=0;i<nums.size();i++)
        {
            ans=ans^nums[i];

        }
        return ans;
    
    }
};

















