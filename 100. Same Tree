100. Same Tree
Easy


Given the roots of two binary trees p and q, write a function to check if they are the same or not.
Two binary trees are considered the same if they are structurally identical, and the nodes have the same value.

Example 1:

             1                                     1
            / \                                   / \
           2   3                                 2   3
              p                                    q                                           
                                               
Input: p = [1,2,3], q = [1,2,3]
Output: true

Example 2:

             1                                     1
            /                                       \
           2                                         2
              p                                    q                                           
             

Input: p = [1,2], q = [1,null,2]
Output: false

Example 3:

             1                                     1
            / \                                   / \
           2   1                                 1   2
              p                                    q                                           
             

Input: p = [1,2,1], q = [1,1,2]
Output: false
 

Constraints:

The number of nodes in both trees is in the range [0, 100].
-10^4 <= Node.val <= 10^4

######################################################
CODE:
#######################################################

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool isSame=true;
    bool isSameTree(TreeNode* p, TreeNode* q) {
        
        if(p==NULL and q==NULL)
            return true;
        
        if(p==NULL or q==NULL)
            return false;
       
        if(p->val !=q->val)
        {
            return false;
        }
            
       return isSameTree(p->left,q->left) and
        isSameTree(p->right,q->right);
        
        return true;
    }
};
