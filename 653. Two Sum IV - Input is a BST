653. Two Sum IV - Input is a BST
Easy

Given the root of a Binary Search Tree and a target number k, return true if there exist two elements in the BST such that their sum is equal to the given target.

Example 1:
		            5
               / \                     
              3   6
             /\    \               
            2  4    7               

Input: root = [5,3,6,2,4,null,7], k = 9
Output: true

Example 2:

		            5
               / \                     
              3   6
             /\    \               
            2  4    7    
            
Input: root = [5,3,6,2,4,null,7], k = 28
Output: false
 

Constraints:

The number of nodes in the tree is in the range [1, 10^4].
-10^4 <= Node.val <= 10^4
root is guaranteed to be a valid binary search tree.
-10^5 <= k <= 10^5

########################################
CODE:
########################################

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    set<int>s;
    bool findTarget(TreeNode* root, int k) {
        if(root==NULL)
            return false;
        
        if(s.count(k-root->val))
            return true;
        s.insert(root->val);
        
        return findTarget(root->left,k) or findTarget(root->right,k);
    }
};
