986. Interval List Intersections
Medium

You are given two lists of closed intervals, firstList and secondList, where firstList[i] = [starti, endi] and secondList[j] = [startj, endj].
Each list of intervals is pairwise disjoint and in sorted order.

Return the intersection of these two interval lists.
A closed interval [a, b] (with a <= b) denotes the set of real numbers x with a <= x <= b.

The intersection of two closed intervals is a set of real numbers that are either empty or represented as a closed interval.
For example, the intersection of [1, 3] and [2, 4] is [2, 3].

 
Example 1:
Input: firstList = [[0,2],[5,10],[13,23],[24,25]], secondList = [[1,5],[8,12],[15,24],[25,26]]
Output: [[1,2],[5,5],[8,10],[15,23],[24,24],[25,25]]


Example 2:
Input: firstList = [[1,3],[5,9]], secondList = []
Output: []
 
Constraints:

0 <= firstList.length, secondList.length <= 1000
firstList.length + secondList.length >= 1
0 <= starti < endi <= 10^9
endi < starti+1
0 <= startj < endj <= 10^9
endj < startj+1

##############################################################
CODE:
##############################################################

///Logic: Yaha pe na phele while lagalo jb tak end ni ho jati list hamari and fir check kro ki first list ka ith and second list ke jth mein 0 pos pe konsi value badi hai.
and jo badi hogi vo hamari lower limit ans ki and upper limit ke lie min lo i[1] and j[1] ka. fir bas push back krdo. ll<=ul given in q. 
now we will increment from smaller side if i[1]>j[1] then do j++ else i++.
*****************************************************************
class Solution {
public:
    vector<vector<int>> intervalIntersection(vector<vector<int>>& firstList, vector<vector<int>>& secondList) {
        
        vector<vector<int>>ans;
        int i=0,j=0,ll,ul;
        while(i<firstList.size() and j<secondList.size())
        {
            ll=max(firstList[i][0],secondList[j][0]);
            ul=min(firstList[i][1],secondList[j][1]);
            
            if(ll<=ul)
               ans.push_back({ll,ul});
            
            firstList[i][1]<secondList[j][1]?i++:j++;
        }
        return ans;
    }
};

