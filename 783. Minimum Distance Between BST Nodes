783. Minimum Distance Between BST Nodes
Easy


Given the root of a Binary Search Tree (BST), return the minimum difference between the values of any two different nodes in the tree.

Example 1:
           4
          / \
         2   6
        / \  
       1  3  

Input: root = [4,2,6,1,3]
Output: 1

Example 2:

           1
          / \
         0   48
       	     / \  
       	    12  49
Input: root = [1,0,48,null,null,12,49]
Output: 1
 

Constraints:

The number of nodes in the tree is in the range [2, 100].
0 <= Node.val <= 10^5

###########################################
CODE:
###########################################
METHOD1:MORE PREFER

**********************
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:

    int Diff=INT_MAX;
    TreeNode* prev=NULL;
    
    void Traverse(TreeNode* root)
    {
        if(root==NULL)
            return;
        if(root->left)
           Traverse(root->left);
        if(prev)
        {
            Diff=min(Diff,abs(root->val-prev->val));
        }
        prev=root;
        
        if(root->right)
        Traverse(root->right);
    }
    
    int minDiffInBST(TreeNode* root) {
    
        Traverse(root);
        return Diff;
        
    }
};

*************************************


METHOD2:
*******************
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int>v;
    void Traverse(TreeNode* root)
    {
        if(root==NULL)
            return;
        
        v.push_back(root->val);
        Traverse(root->left);
        Traverse(root->right);
    }
    
    int minDiffInBST(TreeNode* root) {
    
        Traverse(root);
        sort(v.begin(),v.end());
        int ans=INT_MAX;
      
        for(int i=0;i+1<v.size();i++)
        {
            ans=min(v[i+1]-v[i] ,ans);
        }
       
        return ans;
        
    }
};
