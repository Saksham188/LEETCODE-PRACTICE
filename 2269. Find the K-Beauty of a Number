2269. Find the K-Beauty of a Number
Easy

The k-beauty of an integer num is defined as the number of substrings of num when it is read as a string that meet the following conditions:
It has a length of k.
It is a divisor of num.
Given integers num and k, return the k-beauty of num.

Note:
Leading zeros are allowed.
0 is not a divisor of any value.
A substring is a contiguous sequence of characters in a string.

Example 1:
Input: num = 240, k = 2
Output: 2
Explanation: The following are the substrings of num of length k:
- "24" from "240": 24 is a divisor of 240.
- "40" from "240": 40 is a divisor of 240.
Therefore, the k-beauty is 2.

Example 2:
Input: num = 430043, k = 2
Output: 2
Explanation: The following are the substrings of num of length k:
- "43" from "430043": 43 is a divisor of 430043.
- "30" from "430043": 30 is not a divisor of 430043.
- "00" from "430043": 0 is not a divisor of 430043.
- "04" from "430043": 4 is not a divisor of 430043.
- "43" from "430043": 43 is a divisor of 430043.
Therefore, the k-beauty is 2.
 

Constraints:

1 <= num <= 10^9
1 <= k <= num.length (taking num as a string)

############################################
CODE:
############################################
TC:O(N)

class Solution {
public:
    int divisorSubstrings(int num, int k) {
  
        string number=to_string(num);
        int val=0,Ans=0;

        for(int i=0;i<k;i++)
        {
            val=val*10 +(number[i]-'0');
        }

        if(val!=0 and num%val==0)
        {
            Ans++;
        }
        
        for(int i=k;i<number.size();i++)
        {
            val=(val- (pow(10,k-1)*(number[i-k]-'0')) )*10 + (number[i]-'0');
            if(val!=0 and num%val==0)
            {
                Ans++;
            }
            cout<<val<<" ";

        
        }
        return Ans;
    }
};
