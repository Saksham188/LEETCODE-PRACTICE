1323. Maximum 69 Number
Easy

You are given a positive integer num consisting only of digits 6 and 9.
Return the maximum number you can get by changing at most one digit (6 becomes 9, and 9 becomes 6).

 

Example 1:
Input: num = 9669
Output: 9969
Explanation: 
Changing the first digit results in 6669.
Changing the second digit results in 9969.
Changing the third digit results in 9699.
Changing the fourth digit results in 9666.
The maximum number is 9969.

Example 2:
Input: num = 9996
Output: 9999
Explanation: Changing the last digit 6 to 9 results in the maximum number.

Example 3:
Input: num = 9999
Output: 9999
Explanation: It is better not to apply any change.
 

Constraints:

1 <= num <= 10^4
num consists of only 6 and 9 digits.

############################################
CODE:
############################################

class Solution {
public:
    int maximum69Number (int num) {
        int num2=0,count=0;
      
        while(num>0)
        {
            num2=num2*10+num%10;
            num=num/10;
        }
        num=0;
        while(num2>0)
        {
            if(num2%10==6 and count==0)
            {
                num=num*10 + 9;
                count=1;
            }
            else
                num=num*10+num2%10;
            
            num2=num2/10;
        }
        return num;
    }
};

#############################
METHOD2: MORE BETTER
#############################
///Logic store last position of 6 in index. and here take p as 1,10,100 for each traversal.now if index remains -1 then return num else return num +index*3.                
/*
eg 9669 -> traverse from last  
p=1 num2=966, 
p=10 num=96 index=10 ,  
p=100 num=9 index=100,  here is last occur of 6.
num=0 index=4.

now since index!=-1 so ans will be num+index*3 ie  9669+ 100*3=9669+300=9969

eg2 : 9999
here ans will remain same

*/
class Solution {
public:
    int maximum69Number (int num) {
        int num2=num,p=1,index=-1;
      
        while(num2>0)
        {
            if(num2%10==6)
               index=p;
            
            p*=10;    
            num2=num2/10;
        }
      
        return (index==-1)?num:num+index*3;
        
    }
};















