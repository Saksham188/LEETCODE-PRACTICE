797. All Paths From Source to Target
Medium

Given a directed acyclic graph (DAG) of n nodes labeled from 0 to n - 1, find all possible paths from node 0 to node n - 1 and return them in any order.
The graph is given as follows: graph[i] is a list of all nodes you can visit from node i (i.e., there is a directed edge from node i to node graph[i][j]).
 
Example 1:
Input: graph = [[1,2],[3],[3],[]]
Output: [[0,1,3],[0,2,3]]
Explanation: There are two paths: 0 -> 1 -> 3 and 0 -> 2 -> 3.

Example 2:
Input: graph = [[4,3,1],[3,2,4],[3],[4],[]]
Output: [[0,4],[0,3,4],[0,1,3,4],[0,1,2,3,4],[0,1,4]]
 

Constraints:

n == graph.length
2 <= n <= 15
0 <= graph[i][j] < n
graph[i][j] != i (i.e., there will be no self-loops).
All the elements of graph[i] are unique.
The input graph is guaranteed to be a DAG.

##############################################
CODE:
##############################################
///DFS SOL:
class Solution {
public:
        int start=0,end;
    
    void DAG(vector<vector<int> >&Ans,vector<int>Temp,vector<vector<int>>& graph,int start=0)
    {
        Temp.push_back(start);
        if(start==end)
        {
            Ans.push_back(Temp);
            Temp.pop_back();
            return;
        }

        for(auto &i:graph[start])
        {
            DAG(Ans,Temp,graph,i);
        }
        Temp.pop_back();
        
    }
    
    vector<vector<int>> allPathsSourceTarget(vector<vector<int>>& graph) {
        
        vector<vector<int> >Ans;
        vector<int>Temp;
        end=graph.size()-1;
        DAG(Ans,Temp,graph,0);
        return Ans;
        
    }
    
};


#################################################
BFS:
##################################################
class Solution {
public:
    
    vector<vector<int>> allPathsSourceTarget(vector<vector<int>>& graph) {
        
        vector<vector<int> >Ans;
        vector<int>Temp;
         vector <int> Adjacency[graph.size()];
        
        for(int i=0; i<graph.size(); i++)
            for(auto g : graph[i])
                Adjacency[i].push_back(g);
        
        
        queue<vector<int>>Q;
        Q.push({0});
        
        while(!Q.empty())
        {
            Temp=Q.front();
            Q.pop();
            
            if(Temp.back()==graph.size()-1)
            {
                Ans.push_back(Temp);
            }
            
            for(auto it:Adjacency[Temp.back()])
            {
                vector<int>v=Temp;
                v.push_back(it);
                Q.push(v);
            }
        }
        
        return Ans;
        
    }
    
};
