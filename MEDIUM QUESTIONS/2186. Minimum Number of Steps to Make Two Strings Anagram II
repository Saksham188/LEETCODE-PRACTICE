2186. Minimum Number of Steps to Make Two Strings Anagram II
Medium

You are given two strings s and t. In one step, you can append any character to either s or t.
Return the minimum number of steps to make s and t anagrams of each other.
An anagram of a string is a string that contains the same characters with a different (or the same) ordering.

Example 1:
Input: s = "leetcode", t = "coats"
Output: 7
Explanation: 
- In 2 steps, we can append the letters in "as" onto s = "leetcode", forming s = "leetcodeas".
- In 5 steps, we can append the letters in "leede" onto t = "coats", forming t = "coatsleede".
"leetcodeas" and "coatsleede" are now anagrams of each other.
We used a total of 2 + 5 = 7 steps.
It can be shown that there is no way to make them anagrams of each other with less than 7 steps.

Example 2:
Input: s = "night", t = "thing"
Output: 0
Explanation: The given strings are already anagrams of each other. Thus, we do not need any further steps.

Constraints:
1 <= s.length, t.length <= 2 * 10^5
s and t consist of lowercase English letters.

#############################################
CODE:
#############################################
SOL1:
class Solution {
public:
    int minSteps(string s, string t) {        
        int Ans=0;
        vector<int>SCount(26,0),TCount(26,0);
                          
        for(int i=0;i<s.size();i++)
        {
           SCount[s[i]-'a']++;
        }
        
        for(int i=0;i<t.size();i++)
        {
            TCount[t[i]-'a']++;
        }
        
        for(int i=0;i<26;i++)
        {
           Ans+=abs(SCount[i]-TCount[i]);
        }
        
        return Ans;
    }
};

************************************************
SOL2:
************************************************
class Solution {
public:
    int minSteps(string s, string t) {
        
        unordered_map<char,int>Mp,Mp2;
        int Ans=0;
        
        for(int i=0;i<s.size();i++)
        {
            Mp[s[i]]++;
        }
        
        for(int i=0;i<t.size();i++)
        {
            Mp2[t[i]]++;
        }
        
        for(auto it:Mp)
            cout<<it.first<<" "<<it.second<<endl;
        
        cout<<endl;
        for(auto it:Mp2)
            cout<<it.first<<" "<<it.second<<endl;
        
        for(auto it:Mp)
        {
            if(Mp2.find(it.first)==Mp2.end())
            {
                Ans+=it.second;
            }
            else
            {
                if(Mp2[it.first]!=it.second)
                {
                    Ans+=abs(it.second-Mp2[it.first]);
                }
            }
        }
        
        for(auto it:Mp2)
        {
            if(Mp.find(it.first)==Mp.end())
            {
                Ans+=it.second;
            }
         
        }
        
        return Ans;
    }
};
