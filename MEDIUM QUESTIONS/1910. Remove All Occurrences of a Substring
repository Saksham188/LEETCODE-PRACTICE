1910. Remove All Occurrences of a Substring
Medium



Given two strings s and part, perform the following operation on s until all occurrences of the substring part are removed:
Find the leftmost occurrence of the substring part and remove it from s.
Return s after removing all occurrences of part.
A substring is a contiguous sequence of characters in a string.

Example 1:
Input: s = "daabcbaabcbc", part = "abc"
Output: "dab"
Explanation: The following operations are done:
- s = "daabcbaabcbc", remove "abc" starting at index 2, so s = "dabaabcbc".
- s = "dabaabcbc", remove "abc" starting at index 4, so s = "dababc".
- s = "dababc", remove "abc" starting at index 3, so s = "dab".
Now s has no occurrences of "abc".

Example 2:
Input: s = "axxxxyyyyb", part = "xy"
Output: "ab"
Explanation: The following operations are done:
- s = "axxxxyyyyb", remove "xy" starting at index 4 so s = "axxxyyyb".
- s = "axxxyyyb", remove "xy" starting at index 3 so s = "axxyyb".
- s = "axxyyb", remove "xy" starting at index 2 so s = "axyb".
- s = "axyb", remove "xy" starting at index 1 so s = "ab".
Now s has no occurrences of "xy".
 

Constraints:
1 <= s.length <= 1000
1 <= part.length <= 1000
s and part consists of lowercase English letters.

#######################################################
CODE:
#######################################################
///Interview Perspective Method:
class Solution {
public:
//Here in this function it will check if our substr is found or not.traverse part from last and if all char match return true else return false.
    bool CheckOccurence(stack<char>ch,string part)
    {
        int j=part.size()-1;
        
        while(j>=0 and part[j]==ch.top())
        {
            ch.pop();
            j--;
        }
        if(j==-1) ///ie whole substring found.
            return true;
        return false;
    }
    
    string removeOccurrences(string s, string part) {
       string Ans="";
        stack<char>ch;
        int j=part.size();

        for(int i=0;i<s.size();i++)
        {
            ch.push(s[i]);
            //If size of stack bcme greater than part eg partsize=3 then when 3rd element got inserted check if substr match or not,if Match remove it from this stack
            also.As here we will send copy to above fun.
            if(ch.size()>=part.size())
            {
                if(CheckOccurence(ch,part))
                {
                    int t=j;
                    
                    while(t--)
                    {
                        ch.pop();
                    }
                    
                }
            }
        }
       
        while(!ch.empty())
        {
            Ans+=ch.top();
            ch.pop();
        }
        
        reverse(Ans.begin(),Ans.end());
        return Ans;
    }
};



///Method2:
class Solution {
public:
    string removeOccurrences(string s, string part) {
        //Yaha ham ye krre ki dekhre ya toh string empty ho jaye ya fir vo substring find na ho tb tk loop chalao aur fir agar miljaye toh erase krdo.
        while(s.size()!=0 and s.find(part)<s.size())
        {
            s.erase(s.find(part),part.size());            
        }
        return s;
    }
};
