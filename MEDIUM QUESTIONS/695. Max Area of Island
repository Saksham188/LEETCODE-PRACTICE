695. Max Area of Island
Medium

You are given an m x n binary matrix grid. An island is a group of 1's (representing land) connected 4-directionally (horizontal or vertical.) You may assume all four 
edges of the grid are surrounded by water.
The area of an island is the number of cells with a value 1 in the island.
Return the maximum area of an island in grid. If there is no island, return 0.

Example 1:
Input: grid = [[0,0,1,0,0,0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,1,1,0,1,0,0,0,0,0,0,0,0],[0,1,0,0,1,1,0,0,1,0,1,0,0],[0,1,0,0,1,1,0,0,1,1,1,0,0],
[0,0,0,0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,0,0,0,0,0,0,1,1,0,0,0,0]]
Output: 6
Explanation: The answer is not 11, because the island must be connected 4-directionally.

Example 2:
Input: grid = [[0,0,0,0,0,0,0,0]]
Output: 0
 

Constraints:
m == grid.length
n == grid[i].length
1 <= m, n <= 50
grid[i][j] is either 0 or 1.

##################################
CODE:
##################################
class Solution {
public:
    int CheckAns(int m,int n,vector<vector<int>>&grid)
    {
        if(m<0 or n<0 or m>=grid.size() or n>=grid[0].size() or grid[m][n]==0 )
            return 0;
        grid[m][n]=0;

        return 1+CheckAns(m-1,n,grid)+CheckAns(m,n-1,grid)+CheckAns(m+1,n,grid)+CheckAns(m,n+1,grid);
        
    }
    int maxAreaOfIsland(vector<vector<int>>& grid) {
        int Ans=0,m=grid.size(),n=grid[0].size();
        
        for(int i=0;i<m;i++)
        {
            for(int j=0;j<n;j++)
            {
                if(grid[i][j]==1)
                    Ans=max(Ans,CheckAns(i,j,grid));
            }
        }
        return Ans;
    }
};
