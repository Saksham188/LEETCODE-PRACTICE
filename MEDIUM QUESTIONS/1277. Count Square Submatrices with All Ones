1277. Count Square Submatrices with All Ones
Medium

Given a m * n matrix of ones and zeros, return how many square submatrices have all ones.

Example 1:
Input: matrix =
[
  [0,1,1,1],
  [1,1,1,1],
  [0,1,1,1]
]
Output: 15
Explanation: 
There are 10 squares of side 1.
There are 4 squares of side 2.
There is  1 square of side 3.
Total number of squares = 10 + 4 + 1 = 15.

Example 2:
Input: matrix = 
[
  [1,0,1],
  [1,1,0],
  [1,1,0]
]
Output: 7
Explanation: 
There are 6 squares of side 1.  
There is 1 square of side 2. 
Total number of squares = 6 + 1 = 7.
 
Constraints:
1 <= arr.length <= 300
1 <= arr[0].length <= 300
0 <= arr[i][j] <= 1

###########################################
CODE:
// Its like that string matching problem of aps
###########################################

/*****************************************************/
///Logic:What we need to know here is how to make a square For example, if we scan the matrix from the left top to right bottom(input matrix denoted by m),
m[i][j] will be the right bottom of a side n square:
// side 1 square: if m[i][j]==1
// side 2 square: if m[i][j]==1 and(m[i-1][j]==1 and m[i-1][j-1]==1 and m[i][j-1]==1)
// -> (m[i-1][j], m[i-1][j-1], m[i][j-1] are side 1 squares)
// side 3 square: if m[i][j]==1 and (m[i-1][j], m[i-1][j-1], m[i][j-1] are side 2 squares)
// ...
// ->
// side n square: if m[i][j]==1 and (m[i-1][j], m[i-1][j-1], m[i][j-1] are side n-1 squares)
// thus we need a matrix to record the largest square (m[i-1][j], m[i-1][j-1], m[i][j-1]) can make, and by comparing we can know the maximum size of square m[i][j]
can make.

class Solution {
public:
    int countSquares(vector<vector<int>>& matrix) {
        int Ans=0;
        
        for(int i=0;i<matrix.size();i++)
        {
            for(int j=0;j<matrix[i].size();j++)
            {
                if(i>0 and j>0 and matrix[i][j]==1)
                {
                    matrix[i][j]=min(matrix[i-1][j-1],min(matrix[i][j-1],matrix[i-1][j]))+1;
                }
                Ans+=matrix[i][j];
            }
        }
        return Ans;
    }
};
