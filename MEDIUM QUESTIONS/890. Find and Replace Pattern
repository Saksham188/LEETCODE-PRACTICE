890. Find and Replace Pattern
Medium

Given a list of strings words and a string pattern, return a list of words[i] that match pattern. You may return the answer in any order.
A word matches the pattern if there exists a permutation of letters p so that after replacing every letter x in the pattern with p(x), we get the desired word.
Recall that a permutation of letters is a bijection from letters to letters: every letter maps to another letter, and no two letters map to the same letter.

Example 1:
Input: words = ["abc","deq","mee","aqq","dkd","ccc"], pattern = "abb"
Output: ["mee","aqq"]
Explanation: "mee" matches the pattern because there is a permutation {a -> m, b -> e, ...}. 
"ccc" does not match the pattern because {a -> c, b -> c, ...} is not a permutation, since a and b map to the same letter.

Example 2:
Input: words = ["a","b","c"], pattern = "a"
Output: ["a","b","c"]
 
Constraints:
1 <= pattern.length <= 20
1 <= words.length <= 50
words[i].length == pattern.length
pattern and words[i] are lowercase English letters.

##############################################
CODE:
##############################################
class Solution {
public:
//     Logic: here find matching from a to b and from b to a to see ki shi map hore hai
    bool FindMatch(string s1,string s2)
    {
        unordered_map<char,char>Ch1,Ch2;
        for(int j=0;j<s2.size();j++)
        {
            if((Ch1.count(s1[j]) and Ch1[s1[j]]!=s2[j]) or
            (Ch2.count(s2[j]) and Ch2[s2[j]]!=s1[j]))
               return false;
            else
            {
                Ch1[s1[j]]=s2[j];
                Ch2[s2[j]]=s1[j];
            }
        }
        return true;
    }
    vector<string> findAndReplacePattern(vector<string>& words, string pattern) {
        vector<string>Ans;
        
        for(int i=0;i<words.size();i++)
        {
        
            if(FindMatch(words[i],pattern))
            Ans.push_back(words[i]);

            
        }
        return Ans;
        
        
    }
};
