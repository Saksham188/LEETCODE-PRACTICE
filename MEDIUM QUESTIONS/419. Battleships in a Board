419. Battleships in a Board
Medium

Given an m x n matrix board where each cell is a battleship 'X' or empty '.', return the number of the battleships on board.
Battleships can only be placed horizontally or vertically on board. In other words, they can only be made of the shape 1 x k (1 row, k columns) or
k x 1 (k rows, 1 column), where k can be of any size. At least one horizontal or vertical cell separates between two battleships (i.e., there are no adjacent battleships)
 
Example 1:
Input: board = [["X",".",".","X"],[".",".",".","X"],[".",".",".","X"]]
Output: 2

Example 2:
Input: board = [["."]]
Output: 0

Constraints:
m == board.length
n == board[i].length
1 <= m, n <= 200
board[i][j] is either '.' or 'X'.
 
Follow up: Could you do it in one-pass, using only O(1) extra memory and without modifying the values board?

###############################################
CODE:
###############################################
// for each 'X', we will decide whether this X will create a new battleship or it will join an already created battleship. This can be checked by following conditions:
// if there is an 'X' to upper cell of current cell, current X will not create a new battleship, it will join the battleship of upper cell.
// if there is an 'X' to left cell of current cell, current X will not create a new battleship, it will join the battleship of left cell.
// So, when there is no X to left cell or upper cell of the current cell, A new battleship is created. The number of battleships is simply the number of times 
a new battleship gets created which will be the answer.

class Solution {
public:
    int countBattleships(vector<vector<char>>& board) {
        int ans=0;
        
        for(int i=0;i<board.size();i++)
        {

            for(int j=0;j<board[i].size();j++)
            {
                if(board[i][j]=='X')
                {
                    if((i==0 or (i-1 >=0 and board[i-1][j]!='X')) and (j==0 or (j-1 >=0 and board[i][j-1]!='X')))
                        ans++;
                }
                    
            }
        }
        return ans;
    }
};
