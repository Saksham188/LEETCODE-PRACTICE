347. Top K Frequent Elements
Medium

Given an integer array nums and an integer k, return the k most frequent elements. You may return the answer in any order.

 

Example 1:
Input: nums = [1,1,1,2,2,3], k = 2
Output: [1,2]

Example 2:
Input: nums = [1], k = 1
Output: [1]
 

Constraints:

1 <= nums.length <= 105
k is in the range [1, the number of unique elements in the array].
It is guaranteed that the answer is unique.
 

Follow up: Your algorithm's time complexity must be better than O(n log n), where n is the array's size.

###############################################################
CODE:
##############################################################

class Node
{
  public:
    int data;
    int freq;
    
    Node(int a,int b)
    {
        data=a;
        freq=b;
    }
};

class Compare
{
    public:
  bool operator()(Node a, Node b)
  {
      return a.freq<b.freq;
  }
    
};

class Solution {
public:
    vector<int> topKFrequent(vector<int>& nums, int k) {
        
        unordered_map<int,int>mp;
        
        for(auto it:nums)
        {
            mp[it]++;
        }
        
        priority_queue<Node,vector<Node>,Compare>Heap;
        
        for(auto it:mp)
        {
            Heap.push(Node(it.first,it.second));
        }
        
        vector<int>ans;
        
        for(int i=0;i<k;i++)
        {
            Node temp=Heap.top();
            Heap.pop();
            ans.push_back(temp.data);
        }
        
        return ans;
    }
};














