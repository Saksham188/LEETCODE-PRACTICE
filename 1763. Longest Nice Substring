1763. Longest Nice Substring
Easy


A string s is nice if, for every letter of the alphabet that s contains, it appears both in uppercase and lowercase. For example, 
"abABB" is nice because 'A' and 'a' appear, and 'B' and 'b' appear. However, "abA" is not because 'b' appears, but 'B' does not.
Given a string s, return the longest substring of s that is nice. If there are multiple, return the substring of the earliest occurrence.
If there are none, return an empty string.

 

Example 1:
Input: s = "YazaAay"
Output: "aAa"
Explanation: "aAa" is a nice string because 'A/a' is the only letter of the alphabet in s, and both 'A' and 'a' appear.
"aAa" is the longest nice substring.

Example 2:
Input: s = "Bb"
Output: "Bb"
Explanation: "Bb" is a nice string because both 'B' and 'b' appear. The whole string is a substring.

Example 3:
Input: s = "c"
Output: ""
Explanation: There are no nice substrings.
 

Constraints:

1 <= s.length <= 100
s consists of uppercase and lowercase English letters.


##########################################
CODE:
##########################################

///Logic: Here first make an unordered set and store all values in it.Now check for each character and if small and capital of that letter exists in set
then continue and if not present then we need to break our string into 2 parts from start till i and i+1 till end and again call the function.
and then at end we will return max length string.
TC:O(N)

class Solution {
public:
    string longestNiceSubstring(string s) {
      if(s.size()<2)
          return "";
      
        unordered_set<char>Values;
        
        for(int i=0;i<s.size();i++)
        {
            Values.insert(s[i]);
        }
        
        for(int i=0;i<s.size();i++)
        {
            if(Values.find(tolower(s[i]))!=Values.end() and    Values.find(toupper(s[i]))!=Values.end() )
                continue;
            
            string prev=longestNiceSubstring(s.substr(0,i));
            string next=longestNiceSubstring(s.substr(i+1));
            
            return (prev.size()>=next.size() ? prev:next);
        }
        
        ///here if our complete string is nice string then it will return complete string as ans.
        return s;
    }
};
