101. Symmetric Tree
Easy

Given the root of a binary tree, check whether it is a mirror of itself (i.e., symmetric around its center).

Example 1:

                   1
		              / \
                 2   2
                / \  /\                            
               3   4 4 3                       
                                           
           
Input: root = [1,2,2,3,4,4,3]
Output: true

Example 2:

                   1
		              / \
                 2   2
                  \   \                            
                   3   3                     
                        

Input: root = [1,2,2,null,3,null,3]
Output: false
 

Constraints:

The number of nodes in the tree is in the range [1, 1000].
-100 <= Node.val <= 100
 

Follow up: Could you solve it both recursively and iteratively?

#############################################
CODE:
##############################################
RECURSIVE:
*******************************************
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool CheckSymmetric(TreeNode* root1,TreeNode* root2)
    {
        if(root1==NULL and root2==NULL)
            return true;
        if(root1 and root2 and root1->val==root2->val)
        {
            return CheckSymmetric(root1->left,root2->right) and CheckSymmetric(root1->right,root2->left);
            
        }
        return false;
    }
    
    bool isSymmetric(TreeNode* root) {
        return CheckSymmetric(root,root);
        
    }
};



******************************************************
ITERATIVE:
*******************************************************
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool isSymmetric(TreeNode* root) {
        if(!root)
            return true;
        
        queue<TreeNode*>Q;
        
        Q.push(root->left);
        Q.push(root->right);
        
        while(!Q.empty())
        {
            TreeNode* left=Q.front();
            Q.pop();
            TreeNode* right=Q.front();
            Q.pop();
            
            ///Agar dono hi null hai toh false ni hoga.
            if(left==NULL and right==NULL)
                continue;
            
            if(left==NULL or right==NULL)
                return false;
            if(left->val!=right->val)
                return false;
            
            Q.push(left->left);
            Q.push(right->right);
            Q.push(left->right);
            Q.push(right->left);                
        }
        return true;
        
    }
};
