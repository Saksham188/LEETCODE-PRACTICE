1275. Find Winner on a Tic Tac Toe Game
Easy


Tic-tac-toe is played by two players A and B on a 3 x 3 grid. The rules of Tic-Tac-Toe are:
Players take turns placing characters into empty squares ' '.
The first player A always places 'X' characters, while the second player B always places 'O' characters.
'X' and 'O' characters are always placed into empty squares, never on filled ones.
The game ends when there are three of the same (non-empty) character filling any row, column, or diagonal.
The game also ends if all squares are non-empty.
No more moves can be played if the game is over.
Given a 2D integer array moves where moves[i] = [rowi, coli] indicates that the ith move will be played on grid[rowi][coli].
return the winner of the game if it exists (A or B). In case the game ends in a draw return "Draw". If there are still movements to play return "Pending".

You can assume that moves is valid (i.e., it follows the rules of Tic-Tac-Toe), the grid is initially empty, and A will play first.

 

Example 1:
Input: moves = [[0,0],[2,0],[1,1],[2,1],[2,2]]
Output: "A"
Explanation: A wins, they always play first.

Example 2:
Input: moves = [[0,0],[1,1],[0,1],[0,2],[1,0],[2,0]]
Output: "B"
Explanation: B wins.


Example 3:
Input: moves = [[0,0],[1,1],[2,0],[1,0],[1,2],[2,1],[0,1],[0,2],[2,2]]
Output: "Draw"
Explanation: The game ends in a draw since there are no moves to make.
 

Constraints:

1 <= moves.length <= 9
moves[i].length == 2
0 <= rowi, coli <= 2
There are no repeated elements on moves.
moves follow the rules of tic tac toe.

##########################################
CODE:
##########################################
class Solution {
public:
    string tictactoe(vector<vector<int>>& moves) {
        
        vector<vector<char> >Board(3,vector<char>(3,0));
        
        for(int i=0;i<moves.size();i++)
        {
            if(i%2==0)
            {
                Board[moves[i][0]][moves[i][1]]='X';
            }
            else
                Board[moves[i][0]][moves[i][1]]='O';
        }
        
        for(int i=0;i<3;i++)
        {
            ///Row
            if(Board[i][0]=='X' and Board[i][1]=='X' and Board[i][2]=='X')
                return "A";
            if(Board[i][0]=='O' and Board[i][1]=='O' and Board[i][2]=='O')
                return "B";
            ///Col
            if(Board[0][i]=='X' and Board[1][i]=='X' and Board[2][i]=='X')
                return "A";
            if(Board[0][i]=='O' and Board[1][i]=='O' and Board[2][i]=='O')
                return "B";
        }
        //Diagonal
        if(Board[0][0]=='X' and Board[1][1]=='X' and Board[2][2]=='X')
            return "A";
        if(Board[0][2]=='X' and Board[1][1]=='X' and Board[2][0]=='X')
            return "A";
            
        if(Board[0][2]=='O' and Board[1][1]=='O' and Board[2][0]=='O')
            return "B";
        if(Board[0][0]=='O' and Board[1][1]=='O' and Board[2][2]=='O')
            return "B";
        
        if(moves.size()==9)
            return "Draw";
        else
            return "Pending";
            
        
    }
};
