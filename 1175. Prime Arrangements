1175. Prime Arrangements
Easy

Return the number of permutations of 1 to n so that prime numbers are at prime indices (1-indexed.)
(Recall that an integer is prime if and only if it is greater than 1, and cannot be written as a product of two positive integers both smaller than it.)
Since the answer may be large, return the answer modulo 10^9 + 7.

Example 1:
Input: n = 5
Output: 12
Explanation: For example [1,2,5,4,3] is a valid permutation, but [5,2,3,4,1] is not because the prime number 5 is at index 1.

Example 2:
Input: n = 100
Output: 682289015
 

Constraints:

1 <= n <= 100

######################################
CODE:
#######################################
//Logic: Our ans is permutation of prime no and composite no till that index. and we did mod at each step to stop it from going out of bound.

class Solution {
public:
    int mod=1e9+7;
    long long fact(int n)
    {
        if(n==0)
            return 1;
        return n*fact(n-1) %mod;
    }
    int numPrimeArrangements(int n) {
       vector<int>Prime{2,3,5,7,11,13,17,19,23,29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97};
        int i,temp;
        for(i=0;i<Prime.size();i++)
        {
            if(n<Prime[i])
            {
                cout<<i;
                temp=i;
                break;
            }
            else if(n==Prime[i])
            {
                temp=i+1;
                break;
            }
            
        }
        
        long long val= (fact(temp)%mod*fact(n-temp)%mod);
        return val%mod;
        
        
        
        
    }
};
