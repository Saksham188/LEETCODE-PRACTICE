872. Leaf-Similar Trees
Easy


Consider all the leaves of a binary tree, from left to right order, the values of those leaves form a leaf value sequence.

		            3
	             / \
              5   1           
             /\   /\              
            6  2  9 8            
               /\      
               7 4     

              


For example, in the given tree above, the leaf value sequence is (6, 7, 4, 9, 8).
Two binary trees are considered leaf-similar if their leaf value sequence is the same.
Return true if and only if the two given trees with head nodes root1 and root2 are leaf-similar.

 
Example 1:

		            3
	             / \
              5   1           
             /\   /\              
            6  2  9 8            
               /\      
               7 4     
               Tree 1
               
               
             		3
	             / \
              5   1           
             /\   /\              
            6  7  4 2            
                    /\      
                    9 8     
            Tree2
             
Input: root1 = [3,5,1,6,2,9,8,null,null,7,4], root2 = [3,5,1,6,7,4,2,null,null,null,null,null,null,9,8]
Output: true


Example 2:

Input: root1 = [1,2,3], root2 = [1,3,2]
Output: false
 
 
		      1                    1
	       / \                  / \
        2   3                3   2
         root1                root2
         
         
Constraints:
The number of nodes in each tree will be in the range [1, 200].
Both of the given trees will have values in the range [0, 200].


#############################################
CODE:
#############################################
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int>v1,v2;
    
    void FirstTree(TreeNode* root1)
    {
        if(root1==NULL)
            return;
        if(root1->left==NULL and root1->right==NULL)
        {
            v1.push_back(root1->val);
        }
        
        FirstTree(root1->left);
        FirstTree(root1->right);
    }
    
    void SecondTree(TreeNode* root2)
    {
        if(root2==NULL)
            return;
        if(root2->left==NULL and root2->right==NULL)
        {
            v2.push_back(root2->val);
        }
        
        SecondTree(root2->left);
        SecondTree(root2->right);
    }
    
    bool leafSimilar(TreeNode* root1, TreeNode* root2) {
        FirstTree(root1);
        SecondTree(root2);
        
        return v1==v2;
        ///Or we can do below method also.
//         if(v1.size()!=v2.size())
//             return false;
        
//         int i=0,j=0;
//         while(i<v1.size() and j<v2.size())
//         {
//             if(v1[i++]!=v2[j++])
//                 return false;
//         }
        
//         return true;
        
    }
};
