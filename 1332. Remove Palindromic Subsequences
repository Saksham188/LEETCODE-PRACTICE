1332. Remove Palindromic Subsequences
Easy


You are given a string s consisting only of letters 'a' and 'b'. In a single step you can remove one palindromic subsequence from s.
Return the minimum number of steps to make the given string empty.
A string is a subsequence of a given string if it is generated by deleting some characters of a given string without changing its order.
Note that a subsequence does not necessarily need to be contiguous.
A string is called palindrome if is one that reads the same backward as well as forward.

 
Example 1:
Input: s = "ababa"
Output: 1
Explanation: s is already a palindrome, so its entirety can be removed in a single step.

Example 2:
Input: s = "abb"
Output: 2
Explanation: "abb" -> "bb" -> "". 
Remove palindromic subsequence "a" then "bb".

Example 3:
Input: s = "baabb"
Output: 2
Explanation: "baabb" -> "b" -> "". 
Remove palindromic subsequence "baab" then "b".
 

Constraints:

1 <= s.length <= 1000
s[i] is either 'a' or 'b'.

##########################################
CODE:
##########################################
///Logic: Here since we have subsequence so if string is empty we return 0,if its palindrome return 1,
//else it take only 2 steps as in one step remove all a as we have subsequence ie not continuous and then remove all b's.
    
*************************************************    
class Solution {
public:
    
    int removePalindromeSub(string s) {
        if(s=="")
          return 1;
        
        string b=s;
        reverse(b.begin(),b.end());
        
        if( b== s)
            return 1;
            
        return 2;
    }
};


