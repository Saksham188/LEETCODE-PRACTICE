1582. Special Positions in a Binary Matrix
Easy


Given an m x n binary matrix mat, return the number of special positions in mat.

A position (i, j) is called special if mat[i][j] == 1 and all other elements in row i and column j are 0 (rows and columns are 0-indexed).

 

Example 1:

1 0 0
0 0 1
1 0 0

Input: mat = [[1,0,0],[0,0,1],[1,0,0]]
Output: 1
Explanation: (1, 2) is a special position because mat[1][2] == 1 and all other elements in row 1 and column 2 are 0.


Example 2:

 1 0 0
 0 1 0
 0 0 1
Input: mat = [[1,0,0],[0,1,0],[0,0,1]]
Output: 3
Explanation: (0, 0), (1, 1) and (2, 2) are special positions.
 

Constraints:

m == mat.length
n == mat[i].length
1 <= m, n <= 100
mat[i][j] is either 0 or 1.

#####################################
CODE:
#####################################

// Logic: Make 2 vectors of row and col and if we get mat[i][j] as 1 then increment the count of row and col for that place. 
and now traverse these vectors and if all are 1 then increment ans.
*************************************

class Solution {
public:
    int numSpecial(vector<vector<int>>& mat) {
        
        vector<int>rowsum(mat.size());
        vector<int>colsum(mat[0].size());
        
       
        for(int i=0;i<rowsum.size();i++)
        {
            for(int j=0;j<colsum.size();j++)
            {
                if(mat[i][j]==1)
                {
                    rowsum[i]++;
                    colsum[j]++;
                }
                
            }
        }
        
        int ans=0;
        
        for(int i=0;i<rowsum.size();i++)
        {
            for(int j=0;j<colsum.size();j++)
            {
                if(mat[i][j]==1 and rowsum[i]==1 and colsum[j]==1)
                {
                    ans++;
                }
                
            }
        }
        return ans;
    }
};
