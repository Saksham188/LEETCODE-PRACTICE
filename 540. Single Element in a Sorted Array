540. Single Element in a Sorted Array
Medium


You are given a sorted array consisting of only integers where every element appears exactly twice, except for one element which appears exactly once.
Return the single element that appears only once.
Your solution must run in O(log n) time and O(1) space.

Example 1:
Input: nums = [1,1,2,3,3,4,4,8,8]
Output: 2

Example 2:
Input: nums = [3,3,7,7,10,11,11]
Output: 10
 

Constraints:

1 <= nums.length <= 10^5
0 <= nums[i] <= 10^5

#############################
CODE:
#############################

class Solution {
public:
    int FindEle(vector<int>&v,int low,int high)
    {
        if(low>high)
        {
            return 0;
        }
        if(low==high)
            return v[low];
        
        int mid=(low+high)/2;
        
        if(mid%2==0)
        {
            if(v[mid]==v[mid+1])
               return FindEle(v,mid+2,high);
            else
               return FindEle(v,low,mid);
        }
        else
        {
            if(v[mid]==v[mid-1])
               return FindEle(v,mid+1,high);
            else
               return FindEle(v,low,mid-1);
        }
        
        return mid;
    }
    int singleNonDuplicate(vector<int>& nums) {
        return FindEle(nums,0,nums.size()-1);
    }
};
