463. Island Perimeter
Easy                                                            
                        

You are given row x col grid representing a map where grid[i][j] = 1 represents land and grid[i][j] = 0 represents water.
Grid cells are connected horizontally/vertically (not diagonally). The grid is completely surrounded by water, and there is exactly one island 
(i.e., one or more connected land cells).
The island doesn't have "lakes", meaning the water inside isn't connected to the water around the island. One cell is a square with side length 1.
The grid is rectangular, width and height don't exceed 100. Determine the perimeter of the island. 

Example 1:
Input: grid = [[0,1,0,0],[1,1,1,0],[0,1,0,0],[1,1,0,0]]
Output: 16
Explanation: The perimeter is the 16 yellow stripes in the image above.

Example 2:
Input: grid = [[1]]
Output: 4

Example 3:
Input: grid = [[1,0]]
Output: 4
 
Constraints:

row == grid.length
col == grid[i].length
1 <= row, col <= 100
grid[i][j] is 0 or 1.
There is exactly one island in grid.


###############################################
CODE:
###############################################

// Logic:Traverse row wise and if we get land and if its neighbours are water then add 1 to ans.
///here we check 4 conditions.4 border cases that if i>0 ie top left corner and j>0 ie top most val of 1st row,and if i+1 and j+1 dont exceed size of col and row.
class Solution {
public:
    int islandPerimeter(vector<vector<int>>& grid) {
        int ans=0;
        
        for(int i=0;i<grid.size();i++)
        {
            for(int j=0;j<grid[i].size();j++)
            {
            ///if we get land first increment by 4 as 4 sides.Now if neighbour is land then reduce ans by 1.
                if(grid[i][j]==1)
                {
                    ans+=4;
                    
                    if(i>0)
                        ans-=grid[i-1][j];                    
                    
                    if(j>0)
                        ans-=grid[i][j-1];
                    
                    if(i+1<grid.size())
                        ans-=grid[i+1][j];
                    
                    if(j+1<grid[i].size())
                        ans-=grid[i][j+1];
                        
                }
            }
        }
        
        return ans;
    
    }
};











