937. Reorder Data in Log Files
Easy


You are given an array of logs. Each log is a space-delimited string of words, where the first word is the identifier.
There are two types of logs:

Letter-logs: All words (except the identifier) consist of lowercase English letters.
Digit-logs: All words (except the identifier) consist of digits.
Reorder these logs so that:

The letter-logs come before all digit-logs.
The letter-logs are sorted lexicographically by their contents. If their contents are the same, then sort them lexicographically by their identifiers.
The digit-logs maintain their relative ordering.
Return the final order of the logs.

 

Example 1:
Input: logs = ["dig1 8 1 5 1","let1 art can","dig2 3 6","let2 own kit dig","let3 art zero"]
Output: ["let1 art can","let3 art zero","let2 own kit dig","dig1 8 1 5 1","dig2 3 6"]
Explanation:
The letter-log contents are all different, so their ordering is "art can", "art zero", "own kit dig".
The digit-logs have a relative order of "dig1 8 1 5 1", "dig2 3 6".

Example 2:
Input: logs = ["a1 9 2 3 1","g1 act car","zo4 4 7","ab1 off key dog","a8 act zoo"]
Output: ["g1 act car","a8 act zoo","ab1 off key dog","a1 9 2 3 1","zo4 4 7"]
 

Constraints:

1 <= logs.length <= 100
3 <= logs[i].length <= 100
All the tokens of logs[i] are separated by a single space.
logs[i] is guaranteed to have an identifier and at least one word after the identifier.

######################################
CODE:
######################################
///Method1: More Preferred:
class Solution {
public:
    vector<string> reorderLogFiles(vector<string>& logs) {
       
       ///stable partition : eg we have array 1 0 2 9 0 0 3, and we want 0 at end.then give start ,end and condition which should come true first.
        eg we did num>0 then       ans=1 2 9 3 0 0 0    stable partition maintains relative order.
        
    ///is alpha checks if digit is a character or not.
    
        auto it=stable_partition(logs.begin(),logs.end(),[&](string s)
        {
           return isalpha(s[s.find(' ') +1]); 
        });
        
        sort(logs.begin(),it,[&](string s1,string s2)
        {
            string substr1=s1.substr(s1.find(' ')+1);
            string substr2=s2.substr(s2.find(' ')+1);
            
            if(substr1==substr2)
            {
                return s1<s2;
            }
            else
                return substr1<substr2;
        });
        
        return logs;
    }
};

///Method2:

class Solution {
public:
    vector<string> reorderLogFiles(vector<string>& logs) {
        vector<string>dig;
        vector<string>let;
        int j=0,flag=0;

        for(int i=0;i<logs.size();i++)
        {
            j=0;
            while(logs[i][j]!=' ')
            {
                j++;
            }
            cout<<logs[i][j+1]<<"\n";
            if(logs[i][j+1]>='0' and logs[i][j+1]<='9')
            {
                dig.push_back(logs[i]);        
            }    
            else
                let.push_back(logs[i]);

        }
        
        sort(let.begin(),let.end(),[&](string s1,string s2){
            int i=0,j=0;
            while(s1[i]!=' ')
                i++;
            while(s2[j]!=' ')
                j++;
            if(s1.substr(i+1)==s2.substr(j+1))
                return s1<s2;
           return s1.substr(i+1)<s2.substr(j+1);
        });

      vector<string>ans;
        

        for(auto it:let)
        {
            cout<<it<<"\n";
            ans.push_back(it);
        }

        
        for(auto it:dig)
        {
            ans.push_back(it);
        }
        
        return ans;
    }
};
