1302. Deepest Leaves Sum
Medium

Given the root of a binary tree, return the sum of values of its deepest leaves.
 
Example 1:

                1
               / \
              2   3           
             / \   \              
            4   5   6            
           /         \
          7           8

Input: root = [1,2,3,4,5,null,6,7,null,null,null,null,8]
Output: 15

Example 2:

                6
               / \
              7   8           
             /\   /\              
            2  7  1 3            
           /   /\    \ 
          9    1 4    5

Input: root = [6,7,8,2,7,1,3,9,null,1,4,null,null,null,5]
Output: 19
 

Constraints:

The number of nodes in the tree is in the range [1, 10^4].
1 <= Node.val <= 100

##############################################
CODE:
##############################################

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int FindHeight(TreeNode* root)
    {
        int height=0;
        if(root==NULL)
            return height;
        
        int lh= FindHeight(root->left);
        int rh= FindHeight(root->right);
        
        return max(lh,rh)+1;
    }
    int deepestLeavesSum(TreeNode* root) {
        
       int height= FindHeight(root);
        int level=1,ans=0;
        
        queue<TreeNode*>q;
        
        q.push(root);
        q.push(NULL);
        
        while(!q.empty())
        {
            TreeNode* temp=q.front();
            q.pop();
            
            
            if(temp!=NULL)
            {
                if(level==height)
                    ans+=temp->val;
                
                if(temp->left)
                    q.push(temp->left);
                
                if(temp->right)
                    q.push(temp->right);
            }
            else if(!q.empty())
            {
                level++;
                q.push(NULL);
            }
        }
        
        return ans;
    }
};
