2032. Two Out of Three
Easy
Given three integer arrays nums1, nums2, and nums3, return a distinct array containing all the values that are present in at least two out of the three arrays. You may return the values in any order.
 

Example 1:
Input: nums1 = [1,1,3,2], nums2 = [2,3], nums3 = [3]
Output: [3,2]
Explanation: The values that are present in at least two arrays are:
- 3, in all three arrays.
- 2, in nums1 and nums2.

Example 2:
Input: nums1 = [3,1], nums2 = [2,3], nums3 = [1,2]
Output: [2,3,1]
Explanation: The values that are present in at least two arrays are:
- 2, in nums2 and nums3.
- 3, in nums1 and nums2.
- 1, in nums1 and nums3.

Example 3:
Input: nums1 = [1,2,2], nums2 = [4,3,3], nums3 = [5]
Output: []
Explanation: No value is present in at least two arrays.
 
Constraints:

1 <= nums1.length, nums2.length, nums3.length <= 100
1 <= nums1[i], nums2[j], nums3[k] <= 100


######################
CODE: Approach1:  31 ms	25.1 MB
######################
class Solution {
public:
    vector<int> twoOutOfThree(vector<int>& nums1, vector<int>& nums2, vector<int>& nums3) {
       
        vector<int>ans;
        sort(nums1.begin(),nums1.end());
        sort(nums2.begin(),nums2.end());
        sort(nums3.begin(),nums3.end());
        
        vector<int>::iterator ip,ip2;
        ip = std::unique(nums1.begin(), nums1.begin() + nums1.size());
        nums1.resize(std::distance(nums1.begin(), ip));
        
        ip = std::unique(nums2.begin(), nums2.begin() + nums2.size());
        nums2.resize(std::distance(nums2.begin(), ip));
          
        ip = std::unique(nums3.begin(), nums3.begin() + nums3.size());
        nums3.resize(std::distance(nums3.begin(), ip));
          
        for(int i=0;i<nums1.size();i++)
        {
            if(std::find(nums2.begin(),nums2.end(),nums1[i])!=nums2.end() || std::find(nums3.begin(),nums3.end(),nums1[i]) !=nums3.end())
            {
                ans.push_back(nums1[i]);
            }
        }
        
        for(int i=0;i<nums2.size();i++)
        {
            if(std::find(nums3.begin(),nums3.end(),nums2[i]) !=nums3.end())
            {
                ans.push_back(nums2[i]);
            }
        }
        sort(ans.begin(),ans.end());
        ip = std::unique(ans.begin(), ans.begin() + ans.size());
        ans.resize(std::distance(ans.begin(), ip));
        
        return ans;
    
    }
};



####################################
APPROACH 2:  It has more TC and space complexity.
####################################
class Solution {
public:
    vector<int> twoOutOfThree(vector<int>& nums1, vector<int>& nums2, vector<int>& nums3) {
       
       
    unordered_set<int>num1(nums1.begin(), nums1.end()), num2(nums2.begin(), nums2.end()), num3(nums3.begin(), nums3.end()), ans;
        
	for (auto const& n1 : num1) {
		if (num2.count(n1) || num3.count(n1))
			ans.insert(n1);
	}
	for (auto n2 : num2) {
		if (num1.count(n2) || num3.count(n2))
			ans.insert(n2);
	}
	return vector<int>(ans.begin(),ans.end());
    }
};
